"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saltFromUrl = exports.ZKSOLC_BIN_REPOSITORY = exports.getZksolcUrl = void 0;
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_env_1 = require("hardhat/internal/core/config/config-env");
const global_dir_1 = require("hardhat/internal/util/global-dir");
require("./type-extensions");
const artifacts_1 = require("hardhat/internal/artifacts");
const await_semaphore_1 = require("hardhat/internal/vendor/await-semaphore");
const compile_1 = require("./compile");
const utils_1 = require("./utils");
Object.defineProperty(exports, "getZksolcUrl", { enumerable: true, get: function () { return utils_1.getZksolcUrl; } });
Object.defineProperty(exports, "saltFromUrl", { enumerable: true, get: function () { return utils_1.saltFromUrl; } });
const fs_1 = __importDefault(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("./constants");
Object.defineProperty(exports, "ZKSOLC_BIN_REPOSITORY", { enumerable: true, get: function () { return constants_1.ZKSOLC_BIN_REPOSITORY; } });
const downloader_1 = require("./compile/downloader");
(0, config_env_1.extendConfig)((config, userConfig) => {
    var _a, _b, _c;
    config.zksolc = Object.assign(Object.assign({}, constants_1.defaultZkSolcConfig), userConfig === null || userConfig === void 0 ? void 0 : userConfig.zksolc);
    config.zksolc.settings = Object.assign(Object.assign({}, constants_1.defaultZkSolcConfig.settings), (_a = userConfig === null || userConfig === void 0 ? void 0 : userConfig.zksolc) === null || _a === void 0 ? void 0 : _a.settings);
    config.zksolc.settings.optimizer = Object.assign(Object.assign({}, constants_1.defaultZkSolcConfig.settings.optimizer), (_c = (_b = userConfig === null || userConfig === void 0 ? void 0 : userConfig.zksolc) === null || _b === void 0 ? void 0 : _b.settings) === null || _c === void 0 ? void 0 : _c.optimizer);
});
(0, config_env_1.extendEnvironment)((hre) => {
    if (hre.network.config.zksync) {
        hre.network.zksync = hre.network.config.zksync;
        let artifactsPath = hre.config.paths.artifacts;
        if (!artifactsPath.endsWith('-zk')) {
            artifactsPath = artifactsPath + '-zk';
        }
        let cachePath = hre.config.paths.cache;
        if (!cachePath.endsWith('-zk')) {
            cachePath = cachePath + '-zk';
        }
        // Forcibly update the artifacts object.
        hre.config.paths.artifacts = artifactsPath;
        hre.config.paths.cache = cachePath;
        hre.artifacts = new artifacts_1.Artifacts(artifactsPath);
        // Update compilers config.
        hre.config.solidity.compilers.forEach((compiler) => (0, utils_1.updateCompilerConf)(compiler, hre.config.zksolc));
        for (const [file, compiler] of Object.entries(hre.config.solidity.overrides)) {
            (0, utils_1.updateCompilerConf)(compiler, hre.config.zksolc);
        }
    }
});
// This override is needed to invalidate cache when zksolc config is changed.
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS, async (args, hre, runSuper) => {
    const { jobs, errors } = await runSuper(args);
    if (hre.network.zksync !== true || hre.config.zksolc.compilerSource !== 'binary') {
        return { jobs, errors };
    }
    const compilersCache = await (0, global_dir_1.getCompilersDir)();
    const mutex = new await_semaphore_1.Mutex();
    await mutex.use(async () => {
        var _a;
        const zksolcDownloader = await downloader_1.ZksolcCompilerDownloader.getDownloaderWithVersionValidated(hre.config.zksolc.version, (_a = hre.config.zksolc.settings.compilerPath) !== null && _a !== void 0 ? _a : '', compilersCache);
        const isZksolcDownloaded = await zksolcDownloader.isCompilerDownloaded();
        if (!isZksolcDownloaded) {
            await zksolcDownloader.downloadCompiler();
        }
        hre.config.zksolc.settings.compilerPath = await zksolcDownloader.getCompilerPath();
        hre.config.zksolc.version = await zksolcDownloader.getVersion();
    });
    jobs.forEach((job) => {
        job.solidityConfig.zksolc = hre.config.zksolc;
        job.solidityConfig.zksolc.settings.compilerPath = hre.config.zksolc.settings.compilerPath;
        if (hre.config.zksolc.settings.libraries) {
            job.solidityConfig.settings.libraries = hre.config.zksolc.settings.libraries;
        }
    });
    return { jobs, errors };
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_ARTIFACT_FROM_COMPILATION_OUTPUT, async ({ sourceName, contractName, contractOutput, }, hre) => {
    var _a, _b, _c, _d;
    if (hre.network.zksync !== true) {
        return (0, artifacts_1.getArtifactFromContractOutput)(sourceName, contractName, contractOutput);
    }
    let bytecode = ((_b = (_a = contractOutput.evm) === null || _a === void 0 ? void 0 : _a.bytecode) === null || _b === void 0 ? void 0 : _b.object) || ((_d = (_c = contractOutput.evm) === null || _c === void 0 ? void 0 : _c.deployedBytecode) === null || _d === void 0 ? void 0 : _d.object) || '';
    bytecode = (0, utils_1.zeroxlify)(bytecode);
    let factoryDeps = {};
    let entries = Object.entries(contractOutput.factoryDependencies || {});
    for (const [hash, dependency] of entries) {
        factoryDeps[(0, utils_1.zeroxlify)(hash)] = dependency;
    }
    return {
        _format: constants_1.ZK_ARTIFACT_FORMAT_VERSION,
        contractName,
        sourceName,
        abi: contractOutput.abi,
        // technically, zkEVM has no difference between bytecode & deployedBytecode,
        // but both fields are included just in case
        bytecode,
        deployedBytecode: bytecode,
        // zksolc does not support unlinked objects,
        // all external libraries are either linked during compilation or inlined
        linkReferences: {},
        deployedLinkReferences: {},
        // zkSync-specific field
        factoryDeps,
    };
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLC, async (args, hre, runSuper) => {
    if (hre.network.zksync !== true) {
        return await runSuper(args);
    }
    return await (0, compile_1.compile)(hre.config.zksolc, args.input, args.solcPath);
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLCJS, async (args, hre, runSuper) => {
    if (hre.network.zksync !== true) {
        return await runSuper(args);
    }
    const solcPath = `${args.solcJsPath}.executable`;
    if (!fs_1.default.existsSync(solcPath)) {
        const solcJsExecutableCode = (0, utils_1.generateSolcJSExecutableCode)(args.solcJsPath, process.cwd());
        fs_1.default.writeFileSync(solcPath, Buffer.from(solcJsExecutableCode), { encoding: 'utf-8', flag: 'w' });
        fs_1.default.chmodSync(solcPath, '755');
    }
    return await (0, compile_1.compile)(hre.config.zksolc, args.input, solcPath);
});
// This task is overriden to:
// - prevent unnecessary solc downloads when using docker
// - download zksolc binary if needed
// - validate zksolc binary
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOLC_BUILD, async (args, hre, runSuper) => {
    if (hre.network.zksync !== true) {
        return await runSuper(args);
    }
    if (hre.config.zksolc.compilerSource === 'docker') {
        // Versions are wrong here when using docker, because there is no
        // way to know them beforehand except to run the docker image, which
        // adds 5-10 seconds to startup time. We cannot read them from artifacts,
        // since that would make cache invalid every time, if the version is
        // different from the one in the docker image.
        //
        // If you wish to know the actual versions from build-info files,
        // please look at `output.version`, `output.long_version`
        // and `output.zk_version` in the generated JSON.
        return {
            compilerPath: '',
            isSolsJs: false,
            version: args.solcVersion,
            longVersion: '',
        };
    }
    console.info(chalk_1.default.yellow((0, constants_1.COMPILING_INFO_MESSAGE)(hre.config.zksolc.version, args.solcVersion)));
    const solcBuild = await runSuper(args);
    return solcBuild;
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_RESULT, async ({ compilationJobs }) => {
    let count = 0;
    for (const job of compilationJobs) {
        count += job.getResolvedFiles().filter((file) => job.emitsArtifacts(file)).length;
    }
    if (count > 0) {
        console.info(chalk_1.default.green(`Successfully compiled ${count} Solidity ${(0, utils_1.pluralize)(count, 'file')}`));
    }
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_START)
    .setAction(async ({ isCompilerDownloaded, solcVersion, }) => {
    if (isCompilerDownloaded) {
        return;
    }
    console.info(chalk_1.default.yellow(`Downloading solc ${solcVersion}`));
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_START)
    .setAction(async ({ compilationJob, }) => {
    let count = compilationJob.getResolvedFiles().length;
    if (count > 0) {
        console.info(chalk_1.default.yellow(`Compiling ${count} Solidity ${(0, utils_1.pluralize)(count, 'file')}`));
    }
});
//# sourceMappingURL=index.js.map